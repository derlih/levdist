name: CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

permissions: {}

jobs:
  lint:
    permissions:
      contents: read

    name: Code lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: 3.8
      - name: Restore PDM installation
        id: pdm
        uses: ./.github/actions/restore-pdm
      - name: Restore lint cache
        id: cache-pdm-lint
        uses: actions/cache@v4
        with:
          path: ${{ steps.pdm.outputs.pdm-cache-dir }}
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-pdm-lint-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
      - name: Install lint deps
        run: pdm install -G lint
      - name: Restore pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Linter
        run: pdm lint
      - name: Type check
        run: pdm mypy

  test:
    permissions:
      contents: read

    name: Unit tests
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu, macos, windows]
      fail-fast: true
    runs-on: ${{ matrix.os }}-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python_version }}
      - name: Restore PDM installation
        id: pdm
        uses: ./.github/actions/restore-pdm
      - name: Restore test cache
        id: cache-pdm-test
        uses: actions/cache@v4
        with:
          path: ${{ steps.pdm.outputs.pdm-cache-dir }}
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-pdm-test-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
      - name: Install lint deps
        if: matrix.os == 'windows'
        run: pdm install -v -G test
        env:
          WITH_COVERAGE: 1
      - name: Install lint deps (LLVM)
        if: matrix.os == 'macos'
        run: pdm install -v -G test
        env:
          WITH_COVERAGE: 1
          CC: clang
      - name: Install lint deps (GCC)
        if: matrix.os == 'ubuntu'
        run: pdm install -v -G test
        env:
          WITH_COVERAGE: 1
          CC: gcc
      - name: Run unit tests with coverage
        if: matrix.os == 'windows'
        run: pdm test-cov
      - name: Run unit tests with coverage (LLVM)
        if: matrix.os == 'macos'
        run: pdm test-cov-llvm
      - name: Run unit tests with coverage (GCC)
        if: matrix.os == 'ubuntu'
        run: pdm test-cov-gcc
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml,./coverage.lcov,./*.gcov
          flags: OS-${{ matrix.os }}-Python-${{ matrix.python_version }}
